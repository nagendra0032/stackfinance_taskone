{"version":3,"sources":["cards.js","ProgressBar.js","Outlined_card.js","Btn.js","mainCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginTop","borderRadius","width","textAlign","boxShadow","background","height","color","display","alignItems","alignContent","justifyContent","justifyItems","fontSize","fontWeight","list","padding","Cards","classes","className","myProgress","borderTop","borderRight","borderLeft","myBar","ProgressBar","flexDirection","border","header","spacing","action","orangepara","greypara","opacity","inputfield","inboxline","marginLeft","fontStyle","button","OutlinedCard","Card","TextField","id","size","variant","Btn","props","label","margin","Height","MainCard","CardActions","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec83d9ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles } from '@material-ui/core';\r\n\r\n// styling for inner card \r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    marginTop:10,\r\n    borderRadius: 2.5,\r\n    width: 250,\r\n    textAlign: 'center',\r\n    boxShadow: 'none',\r\n    background:'grey',\r\n    height:40,\r\n    color: 'white',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    alignContent: 'center',\r\n    justifyContent: 'center',\r\n    justifyItems: 'center',\r\n    fontSize: 12,\r\n    fontWeight: 'bold'\r\n  },\r\n  list: {\r\n    padding: '20px',\r\n  },\r\n  \r\n}));\r\n\r\nconst Cards = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className = {classes.root}>\r\n        <p>$167 is still needed for this project</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Cards;","import React from 'react';\r\nimport {makeStyles } from '@material-ui/core';\r\n\r\n\r\n// styling for progress bar\r\nconst useStyles = makeStyles(theme => ({\r\n    myProgress : {\r\n        marginTop:5,\r\n        width: 250,\r\n        height:10,\r\n        borderTop: '0.2px solid grey',\r\n        borderRight: '0.2px solid grey',\r\n        borderLeft: '0.2px solid grey'\r\n        // border: '2px solid black',\r\n        \r\n    },\r\n    myBar: {\r\n        width:200,\r\n        background:'#ff0000',\r\n        height:10\r\n    }\r\n    \r\n  }));\r\n\r\nconst ProgressBar = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n\r\n           <div className={classes.myProgress}>\r\n                <div className={classes.myBar}></div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport {makeStyles } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import { createMuiTheme } from '@material-ui/core/styles';\r\n// import green from '@material-ui/core/colors/green';\r\n// import OutlinedCard from './Outlined_card';\r\n\r\n// const theme = createMuiTheme({\r\n//     palette: {\r\n//       primary: green,\r\n//     },\r\n//   });\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    borderRadius: 0,\r\n    width: 250,\r\n    height: 200,\r\n    textAlign: 'left',\r\n    boxShadow: 'none',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    background: 'white',\r\n    border: '1px solid grey'\r\n  },\r\n  header: {\r\n    textAlign: 'center',\r\n    spacing: 10,\r\n  },\r\n  list: {\r\n    padding: '20px',\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n    textAlign: 'left'\r\n  },\r\n  \r\n  action: {\r\n    marginTop: -5,\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n    \r\n\r\n  },\r\n  orangepara: {\r\n      color: 'orange'\r\n  },\r\n  \r\n  greypara : {\r\n      color : 'black',\r\n      opacity: 0.5,\r\n      textAlign: 'left'\r\n  },\r\n  inputfield : {\r\n      width : 100,\r\n      borderRadius: 0\r\n  },\r\n  inboxline : {\r\n      marginLeft : 20,\r\n      color : '#87CEEB',\r\n      marginTop : -0.5,\r\n      fontStyle : 'italic',\r\n      fontSize : 12\r\n  },\r\n  button: {\r\n    // margin: theme.spacing(1),\r\n    width : 100,\r\n    height : 40,\r\n    background : 'green',\r\n    border : 'none',\r\n    color : 'white',\r\n    fontWeight : 505\r\n  },\r\n//   note: {\r\n//     position: 'relative',\r\n//     marginTop: -10,\r\n//     marginLeft:10,\r\n//     borderRadius: 2.5,\r\n//     width: 250,\r\n//     textAlign: 'center',\r\n//     boxShadow: 'none',\r\n//     background:'white',\r\n//     height:40,\r\n//     color: 'blue',\r\n//     // display: 'flex',\r\n//     // alignItems: 'center',\r\n//     fontSize: 12,\r\n//     fontWeight: 'bold'\r\n//   },\r\n\r\n}));\r\n\r\nconst OutlinedCard= () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root} width=\"400px\">\r\n      {/* <outlinedCard /> */}\r\n      <div className={classes.list}>\r\n          <p><span className={classes.orangepara}>3 days are left</span> to fund this project</p>\r\n          <p className={classes.greypara}>Join the 42 others donors who have already supported this project. Every dollar helps.</p>\r\n        </div>\r\n     <div className={classes.action}>\r\n       <TextField id=\"outlined-basic\" size = \"small\" className={classes.inputfield} variant=\"outlined\" />\r\n       <button className ={classes.button} >GIVE NOW</button>\r\n        {/* <Button variant=\"contained\" color = \"primary\" className={classes.button}>\r\n          GIVE NOW\r\n        </Button> */}\r\n      </div>\r\n      <p className = {classes.inboxline} >why give $50?</p>\r\n      {/* <div className = {classes.note}> */}\r\n        \r\n    {/* </div> */}\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\nexport default OutlinedCard;","// Button component\r\nimport React from 'react';\r\nimport {makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width : 120,\r\n        height : 40,\r\n        background : 'white',\r\n        border : '1px solid grey',\r\n        borderRadius : 2\r\n    }\r\n  }));\r\n\r\n\r\nconst Btn = (props) => {\r\n    const classes = useStyles();\r\n    return(\r\n        <div>\r\n<button className ={classes.root} >{props.label}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Btn;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { makeStyles } from '@material-ui/core';\r\n// import CardHeader from '@material-ui/core/CardHeader';\r\nimport Cards from './cards';\r\nimport ProgressBar from './ProgressBar';\r\nimport OutlinedCard from './Outlined_card';\r\nimport Btn from './Btn';\r\n\r\n// styling for main card\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    marginTop: 200,\r\n    margin: 'auto',\r\n    borderRadius: 0,\r\n    width: 300,\r\n    Height: 400,\r\n    textAlign: 'center',\r\n    boxShadow: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    flexDirection: 'column'\r\n  },\r\n  header: {\r\n    textAlign: 'center',\r\n    spacing: 10,\r\n  },\r\n  list: {\r\n    padding: '20px',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    borderRadius: 0,\r\n   \r\n  },\r\n  action: {\r\n    display: 'flex',\r\n    justifyContent: 'start',\r\n\r\n  },\r\n}));\r\n\r\n\r\nconst MainCard = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root} >\r\n      <Cards />\r\n      <ProgressBar />\r\n      <OutlinedCard />\r\n     \r\n      <CardActions className={classes.action}>\r\n         <Btn label = \"Save for later\" />\r\n         <Btn label = \"Tell your friends\" />\r\n      </CardActions>\r\n     \r\n    </Card>\r\n    \r\n  );\r\n};\r\n\r\n\r\nexport default MainCard;","import React from 'react';\n// import button from './button';\nimport MainCard from './mainCard';\n\n\nfunction App() {\n  return (\n   \n    <div className=\"App\">\n       <MainCard />\n     <h1>Hi Nagendra</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}